{"version":3,"sources":["components/Login/index.jsx","routes.js","components/other/Modal/index.jsx","components/other/Slider/index.jsx","components/Slides/index.jsx","App.js","index.js"],"names":["Login","props","state","username","password","handleChange","bind","handleSubmit","handleUsername","handlePassChange","localStorage","isAuthenticated","this","history","push","key","event","setState","target","value","error","preventDefault","checkValidation","setItem","pathname","className","onSubmit","type","onChange","e","disabled","isDisabled","React","Component","withRouter","PrivateRoute","component","rest","render","to","Modal","selectedList","join","onClick","closeModal","Slider","count","list","i","style","background","Math","floor","random","toString","animation","interval","Slides","location","slideOptions","overallSelectedOptions","isModalVisible","currentSelectedSlidesCount","errorMsg","toggleModal","logout","renderOptions","onSelectingSlideCount","getItem","flag","length","clear","map","App","exact","path","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.fd029940.chunk.js","sourcesContent":["import React from 'react';\nimport './style.scss';\nimport { withRouter } from 'react-router-dom';\nclass Login extends React.Component {\n\tconstructor(props) {\n    super(props);\n    this.state = {\n\t\t\tusername: '',\n\t\t\tpassword: ''\n\t\t};\n    \n    this.handleChange = this.handleChange.bind(this);\n\t\tthis.handleSubmit = this.handleSubmit.bind(this);\n\t\tthis.handleUsername = this.handleChange('username');\n    this.handlePassChange = this.handleChange('password');\n  }\n\n  componentDidMount(){\n    localStorage.isAuthenticated && this.props.history.push('/slides');\n  }\n  \n  handleChange(key) {\n\t\treturn (event)=>{\n\t\t\tthis.setState({[key]: event.target.value});\n\t\t}\n\t}\n  \n\tget isDisabled() {\n\t\treturn !(this.state.username && this.state.password);\n  }\n  \n  checkValidation(){\n    if(this.state.username==='shaadi' && this.state.password ==='123') {\n      this.setState({\n        error: ''\n      })\n      return true;\n    } else {\n      this.setState({\n        error: 'Invalid credentials.'\n      })\n    }\n  }\n  \n  handleSubmit(event) {\n    event.preventDefault();\n   if(this.checkValidation()) {\n      localStorage.setItem('isAuthenticated','true');\n      this.props.history.push({\n        pathname: '/slides',\n        username: this.state.username\n      });\n   }\n  }\n  render(){\n    return(\n      <div className=\"wrapper login-page\">\n        <h1>Welcome to slider testing</h1>\n        <form onSubmit={this.handleSubmit}>\n          <div>\n          <label>\n            username:\n            <input type=\"text\" value={this.state.username} onChange={e=>this.handleUsername(e)} />\n          </label>\n          </div>\n          <div>\n          <label>\n            password:\n            <input type=\"password\" value={this.state.password} onChange={e=>this.handlePassChange(e)} />\n          </label>\n          </div>\n          <span className=\"error\">{this.state.error}</span>\n          <input type=\"submit\" value=\"Submit\" disabled={this.isDisabled} className=\"confirm-btn submit\"/>\n        </form>\n      </div>\n      )\n    }\n  }\n\n  export default withRouter(Login);","import React from 'react';\nimport { Redirect, Route} from 'react-router-dom';\n\n\nexport const PrivateRoute = ({component: Component, ...rest}) => {\n\treturn (\n\n\t\t\t// Show the component only when the user is logged in\n\t\t\t// Otherwise, redirect the user to /signin page\n\t\t\t<Route {...rest} render={props => (\n\t\t\t\t\tlocalStorage.isAuthenticated ?\n\t\t\t\t\t\t\t<Component {...props} />\n\t\t\t\t\t: <Redirect to=\"/\t\" />\n\t\t\t)} />\n\t);\n};\n\n","import React from 'react';\nimport './index.scss';\nexport const Modal = (props)=> {\n  return(\n    <div className=\"modal-container\">\n      <div className=\"overlay\"></div>\n      <div className=\"modal\">\n        <div className=\"modal-content\">\n            <span className=\"selected-count\"> User has selected {props.selectedList.join(', ')} slides.</span>\n            <span className=\"confirm-btn\" onClick={e=> props.closeModal(false)}>Okay</span>\n        </div>\n      </div>\n    </div>\n  )\n}\n","import React from 'react';\nimport Carousel from 'react-material-ui-carousel';\n\nimport './style.scss'\nexport const Slider = (props) => {\n  var count = props.count;\n  var list = [];\n  for(let i=1; i<= count; i++){\n    var style= {\n      background : '#'+Math.floor(Math.random()*16777215).toString(16)\n    };\n    list.push(<div style={style} key={i}><span>{i}</span></div>)\n  }\n\n  return(\n    <Carousel animation='slide' interval=\"1000\">\n      {\n        list\n      }\n    </Carousel>\n  )\n}\n","import React from 'react';\nimport { withRouter } from 'react-router-dom';\n\nimport { Modal } from '../other/Modal';\nimport { Slider } from '../other/Slider';\nimport './style.scss'\n\nclass Slides extends React.Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            username: localStorage.username || props.location.username,\n            slideOptions: ['please select slide count',1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20],\n            overallSelectedOptions: [],\n            isModalVisible: false,\n            currentSelectedSlidesCount: 'please select slide count',\n            errorMsg: ''\n        }\n\n        this.toggleModal = this.toggleModal.bind(this);\n        this.logout = this.logout.bind(this);\n        this.renderOptions = this.renderOptions.bind(this);\n        this.onSelectingSlideCount = this.onSelectingSlideCount.bind(this);\n    }\n\n    componentDidMount(){\n        !localStorage.getItem('username') && localStorage.setItem('username', this.props.location.username);\n    }\n\n    toggleModal(flag) {\n        if(!flag) {\n            this.setState({\n                overallSelectedOptions :[],\n                currentSelectedSlidesCount: 'please select slide count'\n            })\n        }\n\n        if(flag && !this.state.overallSelectedOptions.length) {\n            this.setState({\n                errorMsg: 'Please select atleast one slider demo.'\n            })\n            return false;\n        }\n        this.setState({\n            isModalVisible: flag\n        })\n    }\n\n    logout() {\n        localStorage.clear();\n        this.props.history.push('/');\n    }\n    renderOptions(){\n        return this.state.slideOptions.map((count)=>{\n            return(\n                <option key={count} value={count}>{count}</option>\n            )\n        })\n    }\n\n    onSelectingSlideCount(count){\n\n        this.setState({\n            errorMsg: '',\n            currentSelectedSlidesCount: count,\n            overallSelectedOptions: [...this.state.overallSelectedOptions,count]\n        })\n    }\n    render(){\n        return(\n            <div className=\"slides wrapper\">\n                <header className=\"clearfix\">\n                    <span className=\"username\">Hi {this.state.username}, welcome to our site.</span> <span className=\"logout\" onClick={this.logout}> Logout</span>\n                </header>\n                <main>\n                <select \n                value={this.state.currentSelectedSlidesCount}\n                onChange={e=> this.onSelectingSlideCount(e.target.value)}\n                className=\"select-slide-count\"\n                >\n                {this.renderOptions()}\n                </select>\n                <span onClick={e=> this.toggleModal(true)} className=\"confirm-btn\">finish</span>\n                {\n                    this.state.errorMsg &&  <span className=\"error\">{this.state.errorMsg}</span> \n                }\n                <Slider count={this.state.currentSelectedSlidesCount}/>\n                {\n                    this.state.isModalVisible && <Modal selectedList={this.state.overallSelectedOptions} closeModal={this.toggleModal} />\n                }\n                </main>\n            </div>\n        )\n    }\n}\n\nexport default withRouter(Slides);","import React from 'react';\nimport './index.scss';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route\n} from \"react-router-dom\";\nimport Login from './components/Login'\nimport { PrivateRoute } from './routes';\nimport Slides from './components/Slides';\n\nfunction App() {\n  return (\n  <Router>\n    <Switch>\n      <Route exact path=\"/\" component={Login} />\n      <PrivateRoute exact path=\"/slides\" component={Slides} />\n    </Switch>\n  </Router>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n"],"sourceRoot":""}